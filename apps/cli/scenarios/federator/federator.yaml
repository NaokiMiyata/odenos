#
# FEDERATOR CONFIG
#

# === GENERATOR DECLARATIONS ===

# Generate a ring topology
- producer: topo_ring
  class: Topology
  topo_type: ring
#  networks: 1
  networks: 2
  nodes: 6 
  eports: 6 # The number of unconnected ports

# === MACRO DECLARATIONS ===

# OdenOS base configuration
- macro: create_comp
  scenario:
    - put: /systemmanager/components/lsw
      body:
        type: LearningSwitch
        id: lsw
        cm_id: romgr1
    - assert:
        status: 2\d{2}
    - put: /systemmanager/components/network0
      body:
        type: Network
        id: network0
        cm_id: romgr1
    - assert:
        status: 2\d{2}
    - put: /systemmanager/components/network1
      body:
        type: Network
        id: network1
        cm_id: romgr1
    - assert:
        status: 2\d{2}
    - put: /systemmanager/components/network2
      body:
        type: Network
        id: network2
        cm_id: romgr1
    - assert:
        status: 2\d{2}
    - put: /systemmanager/components/gen1
      body:
        type: Generator 
        id: gen1
        cm_id: romgr1
    - assert:
        status: 2\d{2}
    - put: /systemmanager/components/gen2
      body:
        type: Generator 
        id: gen2
        cm_id: romgr1
    - assert:
        status: 2\d{2}
    - put: /systemmanager/components/aggre
      body:
        type: Aggregator
        id: aggre
        cm_id: romgr1
    - assert:
        status: 2\d{2}
    - put: /systemmanager/components/fed
      body:
        type:  Federator
        id: fed 
        cm_id: romgr1
    - assert:
        status: 2\d{2}

- macro: create_conn
  scenario:
    - put: /systemmanager/connections/lsw
      body:
        id: lsw
        type: LogicAndNetwork
        connection_type: lsw_conn
        logic_id: lsw
        network_id: network0
    - assert:
        status: 2\d{2}
    - put: /systemmanager/connections/federated
      body:
        id: federated
        type: LogicAndNetwork
        connection_type: federated 
        logic_id: fed 
        network_id: network0
    - assert:
        status: 2\d{2}
    - put: /systemmanager/connections/gen1
      body:
        id: gen1 
        type: LogicAndNetwork
        connection_type: original
        logic_id: gen1
        network_id: network1
    - assert:
        status: 2\d{2}
    - put: /systemmanager/connections/fed1
      body:
        id: fed1 
        type: LogicAndNetwork
        connection_type: original
        logic_id: fed
        network_id: network1
    - assert:
        status: 2\d{2}
    - put: /systemmanager/connections/gen2
      body:
        id: gen2 
        type: LogicAndNetwork
        connection_type: original
        logic_id: gen2 
        network_id: network2
    - assert:
        status: 2\d{2}
    - put: /systemmanager/connections/fed2
      body:
        id: fed2 
        type: LogicAndNetwork
        connection_type: original
        logic_id: fed 
        network_id: network2
    - assert:
        status: 2\d{2}
    - sleep: 1

- macro: delete_comp
  scenario:
    - delete: /systemmanager/components/gen
    - assert:
        status: 2\d{2}
    - delete: /systemmanager/components/network1
    - assert:
        status: 2\d{2}
    - delete: /systemmanager/components/network0
    - assert:
        status: 2\d{2}
    - delete: /systemmanager/components/aggre
    - assert:
        status: 2\d{2}
    - delete: /systemmanager/components/lsw
    - assert:
        status: 2\d{2}
  

- macro: delete_conn
  scenario:
    - delete: /systemmanager/connections/original
    - assert:
        status: 2\d{2}
    - delete: /systemmanager/connections/aggregated
    - assert:
        status: 2\d{2}
    - delete: /systemmanager/connections/gen
    - assert:
        status: 2\d{2}
    - delete: /systemmanager/connections/lsw
    - assert:
        status: 2\d{2}

- macro: create_ring 
  scenario:
    - pipeline:
      - topo_ring: [node]
      - create_node
      - rest_request
    - pipeline:
      - topo_ring: [port]
      - create_port
      - rest_request
    - pipeline:
      - topo_ring: [eport]
      - create_port
      - rest_request
    - pipeline:
      - topo_ring: [link]
      - create_link 
      - rest_request
    - sleep: 1

- macro: create_ring_federation 
  scenario:
    - pipeline:
      - topo_ring: [federation, 6, 12]
      - create_federation
      - rest_request
    - sleep: 1


# Generator.java manipulation
# NOTE: You need to make an instance of Generator before using this macro.
- macro: start
  scenario:
    - put: /gen1/env
      body:
        nodePrefix: node
        portPrefix: port
        driverPrefix: gen
        driverSelf: 1
        nodeRange: [1, 5]
        portRange: [7, 12]  # eports
        samplePolicy: RANDOM_NODE_PORT
        sequencePattern: [1, 2]
        adjacencies: [[6, 12, 2, 6, 12]]
        dump: true
    - assert:
        status: 2\d{2}
    - put: /gen2/env
      body:
        nodePrefix: node
        portPrefix: port
        driverPrefix: gen
        driverSelf: 2
        nodeRange: [1, 5]
        portRange: [7, 12]  # eports
        samplePolicy: RANDOM_NODE_PORT 
        sequencePattern: [2, 2]
        adjacencies: [[6, 12, 1, 6, 12]]
        dump: true
    - assert:
        status: 2\d{2}
    - put: /gen1/control
      body:
        frequency: 1000  # in msec 
        generating: true
        payload: "Hello OdenOS!"
        maxSeqno: 2 
    - assert:
        status: 2\d{2}

- macro: stats
  description: Prints out statistics at Generator
  usage: stats <generator number>
  scenario:
    - get: /gen{0}/stats

- macro: stop
  description: Stops InPacket generation at Generator
  usage: stop <generator number>
  scenario:
    - put: /gen{0}/control
      body:
        generating: false 
    - assert:
        status: 2\d{{2}}

# === Create components, connections and ring topo, then initiate CLI ===
# NOTE: The following is executed when clio is initiated with this file
# without -p option.

- macros: 
  - create_comp
  - create_conn
  - create_ring
  - create_ring_federation
- cli
